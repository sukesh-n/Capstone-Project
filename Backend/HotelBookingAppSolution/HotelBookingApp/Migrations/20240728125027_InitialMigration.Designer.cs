// <auto-generated />
using System;
using HotelBookingApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelBookingApp.Migrations
{
    [DbContext(typeof(HotelBookingDbContext))]
    [Migration("20240728125027_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotelBookingApp.Models.Admins.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastlogin")
                        .HasColumnType("datetime2");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Admins.AdminSecurity", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<byte[]>("AdminPassword")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("AdminPasswordHashKey")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("AdminId");

                    b.ToTable("AdminSecurities");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Booking.BookingHistory", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<int>("BookingPaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int");

                    b.Property<int>("BookingType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("time");

                    b.Property<int>("CurrentInOutStatus")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookingId");

                    b.HasIndex("GuestId");

                    b.HasIndex("HotelBranchId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("BookingHistories");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Bookings.Cancellation", b =>
                {
                    b.Property<int>("CancellationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CancellationId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("CancellationBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancellationReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CnacellationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RefundAmount")
                        .HasColumnType("real");

                    b.Property<string>("RefundStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CancellationId");

                    b.HasIndex("BookingId");

                    b.ToTable("Cancellations");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Guests.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuestId"), 1L, 1);

                    b.Property<string>("GuestEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Lastlogin")
                        .HasColumnType("datetime2");

                    b.HasKey("GuestId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Guests.GuestDemographics", b =>
                {
                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuestId");

                    b.ToTable("GuestDemographics");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Guests.GuestGenuineness", b =>
                {
                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int>("ContinuousCancellationCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalCancellationCount")
                        .HasColumnType("int");

                    b.HasKey("GuestId");

                    b.ToTable("GuestGenuinenesses");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Guests.GuestSecurity", b =>
                {
                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("GuestPassword")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("GuestPasswordHashKey")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("GuestId");

                    b.ToTable("GuestSecurities");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.BranchFeedback", b =>
                {
                    b.Property<int>("BranchFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchFeedbackId"), 1L, 1);

                    b.Property<float>("AverageRating")
                        .HasColumnType("real");

                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int");

                    b.HasKey("BranchFeedbackId");

                    b.HasIndex("HotelBranchId");

                    b.ToTable("BranchFeedbacks");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.BranchStatus", b =>
                {
                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableRooms")
                        .HasColumnType("int");

                    b.Property<int>("BookedRooms")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedClosureFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedClosureTo")
                        .HasColumnType("datetime2");

                    b.HasKey("HotelBranchId");

                    b.ToTable("BranchStatuses");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.GroupFeedback", b =>
                {
                    b.Property<int>("GroupFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupFeedbackId"), 1L, 1);

                    b.Property<float>("AverageRating")
                        .HasColumnType("real");

                    b.Property<int>("HotelGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int");

                    b.HasKey("GroupFeedbackId");

                    b.HasIndex("HotelGroupId");

                    b.ToTable("GroupFeedbacks");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelAmenities", b =>
                {
                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<bool>("HasFreePickup")
                        .HasColumnType("bit");

                    b.Property<bool>("HasParking")
                        .HasColumnType("bit");

                    b.HasKey("HotelBranchId");

                    b.ToTable("HotelAmenities");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", b =>
                {
                    b.Property<int>("HotelBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelBranchId"), 1L, 1);

                    b.Property<string>("HotelBranchEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelBranchManager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelBranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelBranchPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelGroupId")
                        .HasColumnType("int");

                    b.Property<int>("HotelType")
                        .HasColumnType("int");

                    b.HasKey("HotelBranchId");

                    b.HasIndex("HotelGroupId");

                    b.ToTable("HotelBranches");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranchSecurity", b =>
                {
                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<byte[]>("HotelBranchPassword")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("HotelBranchPasswordHashKey")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("HotelBranchId");

                    b.ToTable("HotelBranchSecurities");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelBranchRules", b =>
                {
                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<bool>("CanCheckInEarly")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCheckOutLate")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("time");

                    b.HasKey("HotelBranchId");

                    b.ToTable("HotelBranchRules");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelDemographics", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<float>("DistanceFromAirport")
                        .HasColumnType("real");

                    b.Property<float>("DistanceFromBusStand")
                        .HasColumnType("real");

                    b.Property<float>("DistanceFromRailwayStation")
                        .HasColumnType("real");

                    b.Property<string>("HotelAddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelAddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandMark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapCoordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestAirport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestBusStand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearestRailwayStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelId");

                    b.ToTable("HotelDemographics");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelGroups.HotelGroup", b =>
                {
                    b.Property<int>("HotelGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelGroupId"), 1L, 1);

                    b.Property<string>("HotelGroupEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelGroupManagerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelGroupPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelGroupId");

                    b.ToTable("HotelGroups");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelGroups.HotelGroupSecurity", b =>
                {
                    b.Property<int>("HotelGroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("HotelGroupPassword")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("HotelGroupPasswordHashKey")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("HotelGroupId");

                    b.ToTable("HotelGroupSecurities");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelImages", b =>
                {
                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RoomImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("HotelBranchId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.RoomAmenities", b =>
                {
                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<bool>("HasAirConditioner")
                        .HasColumnType("bit");

                    b.Property<bool>("HasAttachedBathroom")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDoorStepDeliveryService")
                        .HasColumnType("bit");

                    b.Property<bool>("HasLaundryService")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRefrigerator")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRoomService")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTelephone")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTelevision")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWifi")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBalconyAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBeachViewAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnGroundFloor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWindowAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithBreakfast")
                        .HasColumnType("bit");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("HotelBranchId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("RoomAmenities");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"), 1L, 1);

                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBed")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<float>("RoomPrice")
                        .HasColumnType("real");

                    b.Property<string>("RoomTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeName")
                        .HasColumnType("int");

                    b.HasKey("RoomTypeId");

                    b.HasIndex("HotelBranchId");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payment.BookingPayment", b =>
                {
                    b.Property<int>("BookingPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingPaymentId"), 1L, 1);

                    b.Property<decimal>("AdvanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AdvancePaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AdvancePaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("AdvancePaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("AdvancePaymentTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<decimal>("HotelAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("HotelPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelPaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("HotelPaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("HotelPaymentTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmountForBooking")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookingPaymentId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingPayments");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payments.HotelSettlement", b =>
                {
                    b.Property<int>("HotelSettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelSettlementId"), 1L, 1);

                    b.Property<decimal>("AmountToBePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<int>("HotelGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayoutDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalAmountReceivedFromBooking")
                        .HasColumnType("real");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HotelSettlementId");

                    b.HasIndex("BookingId");

                    b.HasIndex("HotelBranchId");

                    b.HasIndex("HotelGroupId");

                    b.ToTable("HotelSettlements");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payments.HotelSettlementPayment", b =>
                {
                    b.Property<int>("HotelSettlementPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelSettlementPaymentId"), 1L, 1);

                    b.Property<int>("HotelSettlementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SettlementPaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("SettlementPaymentStatus")
                        .HasColumnType("int");

                    b.HasKey("HotelSettlementPaymentId");

                    b.HasIndex("HotelSettlementId");

                    b.ToTable("HotelSettlementPayments");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payments.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"), 1L, 1);

                    b.Property<int>("BookingPaymentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRefundOnCancellation")
                        .HasColumnType("bit");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RefundMethod")
                        .HasColumnType("int");

                    b.Property<int>("RefundStatus")
                        .HasColumnType("int");

                    b.HasKey("RefundId");

                    b.HasIndex("BookingPaymentId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payments.Revenue", b =>
                {
                    b.Property<int>("HotelBranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("PendingFeeForCurrentMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PendingFeeForNextMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCommissionReceived")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("HotelBranchId");

                    b.ToTable("Revenues");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Admins.AdminSecurity", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Admins.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Booking.BookingHistory", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Guests.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "HotelBranch")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Models.Hotels.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("HotelBranch");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Bookings.Cancellation", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Booking.BookingHistory", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Guests.GuestDemographics", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Guests.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Guests.GuestGenuineness", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Guests.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Guests.GuestSecurity", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Guests.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.BranchFeedback", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "HotelBranches")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelBranches");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.BranchStatus", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "HotelBranch")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelBranch");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.GroupFeedback", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelGroups.HotelGroup", "HotelGroups")
                        .WithMany()
                        .HasForeignKey("HotelGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelGroups");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelAmenities", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelGroups.HotelGroup", "HotelGroup")
                        .WithMany()
                        .HasForeignKey("HotelGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelGroup");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranchSecurity", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "HotelBranch")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelBranch");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelBranchRules", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelDemographics", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelGroups.HotelGroupSecurity", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelGroups.HotelGroup", "HotelGroup")
                        .WithMany()
                        .HasForeignKey("HotelGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelGroup");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.HotelImages", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Models.Hotels.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.RoomAmenities", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Models.Hotels.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Hotels.RoomType", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "HotelBranch")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelBranch");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payment.BookingPayment", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Booking.BookingHistory", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payments.HotelSettlement", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Booking.BookingHistory", "BookingHistory")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingApp.Models.Hotels.HotelGroups.HotelGroup", "HotelGroup")
                        .WithMany()
                        .HasForeignKey("HotelGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingHistory");

                    b.Navigation("Hotel");

                    b.Navigation("HotelGroup");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payments.HotelSettlementPayment", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Payments.HotelSettlement", "HotelSettlement")
                        .WithMany()
                        .HasForeignKey("HotelSettlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelSettlement");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payments.Refund", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Payment.BookingPayment", "BookingPayment")
                        .WithMany()
                        .HasForeignKey("BookingPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingPayment");
                });

            modelBuilder.Entity("HotelBookingApp.Models.Payments.Revenue", b =>
                {
                    b.HasOne("HotelBookingApp.Models.Hotels.HotelBranches.HotelBranch", "HotelBranch")
                        .WithMany()
                        .HasForeignKey("HotelBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelBranch");
                });
#pragma warning restore 612, 618
        }
    }
}
